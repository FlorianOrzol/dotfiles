#!/bin/bash
#
#  
#   _____        _
#  |~>   |     ('v') 
#  /:::::\    /{w w}\ 
# --------------------------------
# Copyright Florian Orzol
#
# description:
# date: 2025-06-06
# version:  0.0.1
#
#    <')
# \_;( )
# >>>> START SCRIPT <<<< #
#

#-tag raspberry PI create usb stick





function create-usb-stick {
	_information "This will create a bootable USB stick for Raspberry Pi without the rpi-imager."
	_information "First, you should download the Raspberry Pi OS image from the official website."
	_information "https://www.raspberrypi.com/software/"
	_enter "Press enter to continue."

	local image=$1
	local device=$2


	if [ -z "$o_image" ]; then
		local currentDir=$(pwd)
		local fileList=$(find $currentDir -mindepth 1 -maxdepth 3 -type f -name '*rasp*.img*')
		local header="Chose the image file to write to the USB stick"
		local prompt="> "

		_fzf "$fileList" "$header" "$prompt"

		# if no file was selected...
		if [[ -z "$RETURN_VALUE" ]]; then
			_information "No image file selected."
			_information "Go to the official Raspberry Pi website to download an image and change to the path of the Image."
			exit 1
		fi

		#if file is in archive, extract it
		case "$RETURN_VALUE" in
			*.xz)
				_information "Extracting image from xz file..."
				_cmd "unxz \"$RETURN_VALUE\" -c > /tmp/rasp.img"
				image="/tmp/rasp.img"
				;;
			*)
				image="$RETURN_VALUE"
				;;
		esac

	fi

	# check if device exists
	if [[ ! -b $device ]]; then
		_information "The device \"$device\" does not exist or is not a block device."
		device=""
	fi

	if [[ -z $device ]]; then
		local deviceList=$(lsblk -d -n -o NAME,SIZE,TYPE | grep disk | awk '{print $1 " (" $2 ")"}')
		#local deviceList=$(lsblk -d -n -o NAME,SIZE,TYPE)
		local header="Select the USB device to write the image to\n$(lsblk)"
		local prompt="> "

		_fzf "$deviceList" "$header" "$prompt"

		if [[ -z "$RETURN_VALUE" ]]; then
			_information "No device selected."
			return 1
		fi

		device="/dev/${RETURN_VALUE%% (*}"

	fi


	_information "Selected device: $device"
	_information "All data on the device will be lost!"
	_CHECK_EXIT _enter "Press enter to continue or Ctrl+C to cancel."

	_information "Unmounting all partitions of the device..."
	_cmd sudo umount "$device"*

	_information "Writing image to device: $device"
	_cmd sudo dd bs=4M if="$image" of="$device" status=progress
	#sudo dd bs=4M if="$image" of="$device" status=progress

	_information "deleting mount point /tmp/al-mount"
	if [[ -d /tmp/al-mount ]]; then
		_cmd sudo umount /tmp/al-mount
		_cmd rm -rf /tmp/al-mount
	fi

	#mount the device to /tmp/al-mount
	_information "creating mount point /tmp/al-mount"
	_cmd mkdir -p /tmp/al-mount

	_information "Mounting the first partition (boot partition) of the device to /tmp/al-mount"
	_cmd sudo mount "$device"1 /tmp/al-mount

	_information "Configuring the boot partition for Raspberry Pi OS"

	_information "creating empty ssh file to enable SSH access"
	_cmd touch /tmp/al-mount/ssh

	_information "creating wpa_supplicant.conf file for WiFi configuration"
	_cmd touch /tmp/al-mount/wpa_supplicant.conf

	_information "Setting permissions for wpa_supplicant.conf"
	_cmd sudo chmod 644 /tmp/al-mount/wpa_supplicant.conf

	_information "insert template for wpa_supplicant.conf for WiFi"
	_cmd "sudo cat > /tmp/al-mount/wpa_supplicant.conf << EOF
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=DE  # Dein Ländercode (z.B. DE für Deutschland, US für USA, AT für Österreich)

network={
    ssid="DEINE_WLAN_SSID"      # Der Name deines WLANs
    psk="DEIN_WLAN_PASSWORT"    # Das Passwort deines WLANs
    key_mgmt=WPA-PSK
}
EOF"


	_information "configuring wpa_supplicant.conf for WiFi"
	_cmd nvim /tmp/al-mount/wpa_supplicant.conf

	_information "configuring cmdline.txt for Raspberry Pi OS"
	_cmd nvim /tmp/al-mount/cmdline.txt

	_information "showing the content of boot partition"
	_cmd ls -la /tmp/al-mount
}
